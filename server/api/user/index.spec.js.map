{"version":3,"sources":["../../../../server/api/user/index.spec.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,aAAa,QAAQ,YAAR,EAAsB,eAAtB,EAAjB;;AAEA,IAAI,eAAe;AACjB,SAAO,gBADU;AAEjB,WAAS,kBAFQ;AAGjB,MAAI,aAHa;AAIjB,kBAAgB,yBAJC;AAKjB,QAAM,eALW;AAMjB,UAAQ;AANS,CAAnB;;AASA,IAAI,kBAAkB;AACpB,iBADoB,6BACF;AAChB,WAAO,6BAAP;AACD,GAHmB;AAIpB,SAJoB,mBAIZ,IAJY,EAIN;AACZ,WAAO,yBAAyB,IAAhC;AACD;AANmB,CAAtB;;AASA,IAAI,aAAa;AACf,OAAK,MAAM,GAAN,EADU;AAEf,OAAK,MAAM,GAAN,EAFU;AAGf,QAAM,MAAM,GAAN,EAHS;AAIf,UAAQ,MAAM,GAAN;AAJO,CAAjB;;;AAQA,IAAI,YAAY,WAAW,SAAX,EAAsB;AACpC,aAAW;AACT,UADS,oBACA;AACP,aAAO,UAAP;AACD;AAHQ,GADyB;AAMpC,uBAAqB,YANe;AAOpC,6BAA2B;AAPS,CAAtB,CAAhB;;AAUA,SAAS,kBAAT,EAA6B,YAAW;;AAEtC,KAAG,0CAAH,EAA+C,YAAW;AACxD,WAAO,SAAP,EAAkB,EAAlB,CAAqB,KAArB,CAA2B,UAA3B;AACD,GAFD;;AAIA,WAAS,gBAAT,EAA2B,YAAW;;AAEpC,OAAG,6DAAH,EAAkE,YAAW;AAC3E,aAAO,WAAW,GAAX,CACJ,QADI,CACK,GADL,EACU,2BADV,EACuC,gBADvC,CAAP,EAEI,EAFJ,CAEO,IAFP,CAEY,IAFZ,CAEiB,UAFjB;AAGD,KAJD;AAMD,GARD;;AAUA,WAAS,uBAAT,EAAkC,YAAW;;AAE3C,OAAG,+DAAH,EAAoE,YAAW;AAC7E,aAAO,WAAW,MAAX,CACJ,QADI,CACK,MADL,EACa,2BADb,EAC0C,kBAD1C,CAAP,EAEI,EAFJ,CAEO,IAFP,CAEY,IAFZ,CAEiB,UAFjB;AAGD,KAJD;AAMD,GARD;;AAUA,WAAS,mBAAT,EAA8B,YAAW;;AAEvC,OAAG,yDAAH,EAA8D,YAAW;AACvE,aAAO,WAAW,GAAX,CACJ,QADI,CACK,KADL,EACY,6BADZ,EAC2C,aAD3C,CAAP,EAEI,EAFJ,CAEO,IAFP,CAEY,IAFZ,CAEiB,UAFjB;AAGD,KAJD;AAMD,GARD;;AAUA,WAAS,6BAAT,EAAwC,YAAW;;AAEjD,OAAG,qEAAH,EAA0E,YAAW;AACnF,aAAO,WAAW,GAAX,CACJ,QADI,CACK,eADL,EACsB,6BADtB,EACqD,yBADrD,CAAP,EAEI,EAFJ,CAEO,IAFP,CAEY,IAFZ,CAEiB,UAFjB;AAGD,KAJD;AAMD,GARD;;AAUA,WAAS,oBAAT,EAA+B,YAAW;;AAExC,OAAG,2DAAH,EAAgE,YAAW;AACzE,aAAO,WAAW,GAAX,CACJ,QADI,CACK,MADL,EACa,6BADb,EAC4C,eAD5C,CAAP,EAEI,EAFJ,CAEO,IAFP,CAEY,IAFZ,CAEiB,UAFjB;AAGD,KAJD;AAMD,GARD;;AAUA,WAAS,iBAAT,EAA4B,YAAW;;AAErC,OAAG,wCAAH,EAA6C,YAAW;AACtD,aAAO,WAAW,IAAX,CACJ,QADI,CACK,GADL,EACU,iBADV,CAAP,EAEI,EAFJ,CAEO,IAFP,CAEY,IAFZ,CAEiB,UAFjB;AAGD,KAJD;AAMD,GARD;AAUD,CAlED","file":"index.spec.js","sourcesContent":["'use strict';\n\nvar proxyquire = require('proxyquire').noPreserveCache();\n\nvar userCtrlStub = {\n  index: 'userCtrl.index',\n  destroy: 'userCtrl.destroy',\n  me: 'userCtrl.me',\n  changePassword: 'userCtrl.changePassword',\n  show: 'userCtrl.show',\n  create: 'userCtrl.create'\n};\n\nvar authServiceStub = {\n  isAuthenticated() {\n    return 'authService.isAuthenticated';\n  },\n  hasRole(role) {\n    return 'authService.hasRole.' + role;\n  }\n};\n\nvar routerStub = {\n  get: sinon.spy(),\n  put: sinon.spy(),\n  post: sinon.spy(),\n  delete: sinon.spy()\n};\n\n// require the index with our stubbed out modules\nvar userIndex = proxyquire('./index', {\n  'express': {\n    Router() {\n      return routerStub;\n    }\n  },\n  './user.controller': userCtrlStub,\n  '../../auth/auth.service': authServiceStub\n});\n\ndescribe('User API Router:', function() {\n\n  it('should return an express router instance', function() {\n    expect(userIndex).to.equal(routerStub);\n  });\n\n  describe('GET /api/users', function() {\n\n    it('should verify admin role and route to user.controller.index', function() {\n      expect(routerStub.get\n        .withArgs('/', 'authService.hasRole.admin', 'userCtrl.index')\n        ).to.have.been.calledOnce;\n    });\n\n  });\n\n  describe('DELETE /api/users/:id', function() {\n\n    it('should verify admin role and route to user.controller.destroy', function() {\n      expect(routerStub.delete\n        .withArgs('/:id', 'authService.hasRole.admin', 'userCtrl.destroy')\n        ).to.have.been.calledOnce;\n    });\n\n  });\n\n  describe('GET /api/users/me', function() {\n\n    it('should be authenticated and route to user.controller.me', function() {\n      expect(routerStub.get\n        .withArgs('/me', 'authService.isAuthenticated', 'userCtrl.me')\n        ).to.have.been.calledOnce;\n    });\n\n  });\n\n  describe('PUT /api/users/:id/password', function() {\n\n    it('should be authenticated and route to user.controller.changePassword', function() {\n      expect(routerStub.put\n        .withArgs('/:id/password', 'authService.isAuthenticated', 'userCtrl.changePassword')\n        ).to.have.been.calledOnce;\n    });\n\n  });\n\n  describe('GET /api/users/:id', function() {\n\n    it('should be authenticated and route to user.controller.show', function() {\n      expect(routerStub.get\n        .withArgs('/:id', 'authService.isAuthenticated', 'userCtrl.show')\n        ).to.have.been.calledOnce;\n    });\n\n  });\n\n  describe('POST /api/users', function() {\n\n    it('should route to user.controller.create', function() {\n      expect(routerStub.post\n        .withArgs('/', 'userCtrl.create')\n        ).to.have.been.calledOnce;\n    });\n\n  });\n\n});\n"]}